package com.library_app.utilities;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import com.library_app.Main;
import java.sql.Statement;


public class Admin extends User{

    private static Connection conn;

// public Connection getConnection() {
//         return Databas
//     }


    // borrowed books here are the total borrowed books of all users.
    // public Admin(String name, String email, String password){

    //     super(name, email, password);

    //     try {
            
    //         int admin_id = search_admin(name, email, password);
    //         if (admin_id != -1){ //admin found in db
    //             super.setId(admin_id);
    //         }
    //         else{
    //             int id =  insert_NewAdmin(name, email, password);
    //             System.out.println("Created Admin: "+name+" successfully.");
    //             super.setId(id);
    //         }
    //     } catch (SQLException e){
    //         e.printStackTrace();
    //         System.out.println("Connection to database failed in Admin constructor method.\n");
    //     }

         

    // }


    //this constructor is needed for loading admins from the database.
    public Admin ( String admin_id, String admin_name, String admin_email, String admin_password){
        super(admin_name, admin_email, admin_password);
        super.setId(admin_id);
    }

    // when creating a new admin object you dont add the id as the id is automatically generated by the database.
    public Admin ( String admin_name, String admin_email, String admin_password){
        super(admin_name, admin_email, admin_password);

    }


    public Admin(){

    }

    // not used yet 
    public String search_admin(String name,  String email, String password) throws SQLException {

        try{

            conn = Database.getConnection();
            String query = "Select * FROM admins WHERE admin_name = ? AND admin_email = ? AND admin_password = ?;";
            PreparedStatement st = conn.prepareStatement(query);
            st.setString(1, name);
            st.setString(2, email);
            st.setString(3, password);
            
            ResultSet rs = st.executeQuery();
            if(rs.next()){
                int admin_id = rs.getInt("admin_id");
                System.out.println("Admin with the provided credentials is found in the database.");
                return Integer.toString(admin_id);
                
            }
            else{
                return null;
            }
        }catch (SQLException e){
            System.out.println("Connection to database failed in search_admin method in Admin\n");
            throw e;

        }
    }

    // public int getLastAdminId() throws SQLException{

    //         try {
                
    //             conn = Database.getConnection();
    //             String query = "SELECT * FROM admins ORDER BY admin_id DESC LIMIT 1;" ;
    //             PreparedStatement st = conn.prepareStatement(query);
    //             ResultSet rs = st.executeQuery();
    //             rs.next(); // move cursor down one row to the firts row. 
    //             int admin_id = rs.getInt("admin_id");
    //             return admin_id;
                
    //         } catch (SQLException e) {
    //            System.out.println("Connection to database failed in getLastAdminId method in Admin.\n");
    //            throw e;
    //         }
    // }

    public boolean add_new_Admin(Admin admin) {
       
        try {
            if (admin == null){
                 System.out.println("Admin passed to add_new_Admin method is null");
                 return false;
            }

                String name = admin.getName();
                String email = admin.getEmail();
                String password = admin.getPassword();
                
                conn = Database.getConnection();
                String query = "INSERT INTO admins(admin_name, admin_email, admin_password) VALUES (?,?,?);";
                PreparedStatement st = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                st.setString(1, name);
                st.setString(2, email);
                st.setString(3, password);
               
                conn.setAutoCommit(false);
                st.executeUpdate();
                ResultSet generated_keys = st.getGeneratedKeys();
                if(generated_keys.next()){
                     int adminId = generated_keys.getInt(1);
                     admin.setId(Integer.toString(adminId));
                }else{
                    System.out.println("Error while getting generated admin id in add_new_admin method.");
                    conn.rollback();
                    conn.commit();
                    conn.setAutoCommit(true);
                    throw new SQLException() ;
                }
                conn.commit();
                conn.setAutoCommit(true);
                
                Main.admins.put(admin.getId(), admin);
                return true;
          
            } catch( SQLException e){
                System.out.println("Connection to Database failed in add_NewAdmin method in Admin.\n" + e);
                return false;
                
            }
            
      
    }


    public boolean add_new_Books(List<Book> books){
        
        if (books.isEmpty() || books == null){
                System.out.println("List of books passed to add_new_Books method is empty or null.");
                return false;
            }

        try{
            conn = Database.getConnection();
            for (Book book : books) {
                String title = book.getTitle();
                String author =  book.getAuthor();
                String genre = book.getGenre();
                int copies = book.getAvailableCopies();

                String query = "INSERT INTO books (title, author, genre, copies) VALUES (?,?,?,?);";
                conn.setAutoCommit(false);

                try { // purpose of this try catch is to allow insertion of other books even if error occured with one of the books.
                PreparedStatement st = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                st.setString(1,title);
                st.setString(2,author);
                st.setString(3,genre);
                st.setInt(4, copies);
                st.executeUpdate(); // can throw error
                ResultSet generated_keys = st.getGeneratedKeys();
                if(generated_keys.next()){
                    int book_id = generated_keys.getInt(1);
                    book.setId(Integer.toString(book_id));
                } else{
                    System.out.println("Couldnt get the book_id from the generated keys in add_new_books method.");
                    throw new SQLException();
                }
                // book.updateId(); // can throw error
                    
                    conn.commit();
                    conn.setAutoCommit(true);

                    Main.books.put(book.getId(), book);
                    System.out.println("Book added with title: "+book.getTitle() +" and Author: "+book.getAuthor() +" Genre: "+ book.getGenre() + " copies: "+book.getAvailableCopies() + " book_id: "+ book.getId());
              
                } catch (Exception e){
                    System.out.println("Error while adding book: "+ title + " to the database. "+ e);
                    conn.rollback();
                    conn.commit();
                    conn.setAutoCommit(true);
                }

               
              
               

                
            }
            conn.setAutoCommit(true); // just to make sure
        } catch (SQLException e){
            e.printStackTrace();
            System.out.println("Connection to database failed in Admin addbooks method.\n");
            return false;
        }
        return true;
      
        
    }

    public boolean editBook(Book book, String type, String data){
        try {
            if (book == null || type == null || data == null)
            {
                System.out.println("Parameters(book, type, data) was passed incorectly in editBook method where one of them is null.");
                return false;
            }

                conn = Database.getConnection();
                String book_id = book.getId();
                String query;
                PreparedStatement st;
                type = type.toUpperCase();
                switch(type){
                    case "TITLE":
                    query = "UPDATE books SET  title = ? WHERE book_id =  ?;";
                    st = conn.prepareStatement(query);
                    st.setString(1, data);
                    st.setString(2, book_id);
                    st.executeUpdate();
                    
                    book.setTitle(data);
                    System.out.println("Title of the book changed succesfully.");
                    break;
                    
                    case "AUTHOR":
                    query = "UPDATE books SET  author = ? WHERE book_id =  ?;";
                    st = conn.prepareStatement(query);
                    st.setString(1, data);
                    st.setString(2, book_id);
                    st.executeUpdate();
                    book.setAuthor(data);
                    System.out.println("Author of the book changed succesfully.");
                    break; 
                    
                    case "GENRE":
                    query = "UPDATE books SET  genre = ? WHERE book_id =  ?;";
                    st = conn.prepareStatement(query);
                    st.setString(1, data);
                    st.setString(2, book_id);
                    st.executeUpdate();
                    book.setGenre(data);
                    System.out.println("Genre of the book changed succesfully.");
                    break;
                    
                    default:
                    System.out.println("Error in identifying the type of data you want to edit in the book.");
                    throw new Exception();
                    
                } 
                
            }catch (Exception e) {
                e.printStackTrace();
            System.out.println("Connection to database failed in editBook method in Admin.\n");
            return false;
            }
            return true;
                

        }

    public boolean editBook(Book book, int copies){
        try {
            if (book == null)
            {
                System.out.println("Book passed to editBook method is null.");
                return false;
            }
            conn = Database.getConnection();
            String book_id = book.getId();
            String query = "UPDATE books SET copies = ? WHERE book_id = ?;";
            PreparedStatement st = conn.prepareStatement(query);
            st.setInt(1, copies);
            st.setString(2, book_id);
            st.executeUpdate();
            book.setAvailableCopies(copies);

            System.out.println("Available copies of the book changed successfully.");

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Connection to database failed in editBook method in Admin.\n");
            return false;
        }
        return true;

    }
  


    public Book deleteBook(Book book){

        try {
            if (book == null)
            {
                System.out.println("Book passed to deleteBook method is null.");
                return null;
            }
            conn = Database.getConnection();
            String query = "DELETE FROM `books` WHERE book_id = ?;";
            PreparedStatement st = conn.prepareStatement(query);
            st.setString(1, book.getId());
            st.executeUpdate();

            Main.books.remove(book.getId());
            System.out.println("Book with title: "+ book.getTitle() + " and book_id: "+ book.getId() +" is deleted  successfully.");

    
        } catch (SQLException e){
            System.out.println("Error while connecting to database in deleteBook method in Admin");

        }
            return book;
    }

    public boolean registerUsers(List<User> users){
        if (users.isEmpty() || users == null){
                System.out.println("List of users passed to registerUsers method is empty or null.");
                return false;
            }

         try{

            conn = Database.getConnection();
            for (User user : users) {
                String name = user.getName();
                String email =  user.getEmail();
                String password = user.getPassword();
                String query = "INSERT INTO `users` (user_name, user_email, user_password) VALUES (?,?,?);";
                conn.setAutoCommit(false);

                try { // purpose of this try catch is to allow insertion of other users even if error occured with one of the users.
                PreparedStatement st = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                st.setString(1,name);
                st.setString(2,email);
                st.setString(3,password);
                st.executeUpdate(); // can throw error
                ResultSet generated_keys = st.getGeneratedKeys();
                if(generated_keys.next()){
                    int user_id = generated_keys.getInt(1);
                    user.setId(Integer.toString(user_id));
                } else{
                    System.out.println("Couldnt get the user_id from the generated keys in registerUsers method.");
                    throw new SQLException();
                }
                    
                    conn.commit();
                    conn.setAutoCommit(true);

                    Main.users.put(user.getId(), user);
                    System.out.println("User added with name: "+user.getName() +" and Email: "+user.getEmail() + "user_id: "+user.getId());
                
              
                } catch (Exception e){
                    System.out.println("Error while adding user: "+ name + " to the database. "+ e);
                    conn.rollback();
                    conn.commit();
                    conn.setAutoCommit(true);
                    throw e;
                    
                }

            }
            conn.setAutoCommit(true); // just to make sure
        } catch (SQLException e){
            // e.printStackTrace();
            System.out.println("Connection to database failed in Admin registerUsers method.\n");
            return false;
            
        }
        return true;
      
    }


    public User deleteUser(User user){
          if (user == null)
            {
                System.out.println("user passed to deleteUser method is null.");
                return null;
            }
          try {
          
            conn = Database.getConnection();
            String query = "DELETE FROM `users` WHERE user_id = ?;";
            PreparedStatement st = conn.prepareStatement(query);
            st.setString(1, user.getId());
            st.executeUpdate();

            Main.users.remove(user.getId());
            System.out.println("User with id: "+ user.getId() + " and user_name: "+ user.getName() +" is deleted  successfully.");

    
        } catch (SQLException e){
            System.out.println("Error while connecting to database in deleteBook method in Admin");

        }
            return user;
    }
    


   public void  updateId() throws SQLException {

            conn = Database.getConnection();
            String query = "SELECT * FROM  `admins` WHERE admin_name = ? AND admin_email = ? AND admin_password = ?;";
            PreparedStatement st = conn.prepareStatement(query);
            st.setString(1, this.getName());
            st.setString(2, this.getEmail());
            st.setString(3, this.getPassword());
            ResultSet rs = st.executeQuery();
            if(rs.next()){
                int admin_id = rs.getInt("admin_id");
                this.setId(Integer.toString(admin_id));
            }
            else{

                System.out.println("No admin with the following data is present in the database.");
                throw new  SQLException();
            }
    }

   @Override
   public boolean sign_up() {

    boolean result = this.add_new_Admin(this);
        
    return result;
   }

   @Override
   public boolean login() {
    
    try {
        this.updateId();
    } catch (Exception e) {

        System.out.println("Failed to login with the following credentials. Incorrect username, email, or password.");
        return false;
    }
    return true;
   }

   @Override
   public void show_menu() {
    while (true){
    System.out.println();
     System.out.println("-------------------------------------------------------------------------");
    System.out.println("Menu:\n");
    System.out.println("Add new book: 1");
    System.out.println( "Edit an existing book: 2");
    System.out.println("Delete book: 3");
    System.out.println("Register new regular user: 4");
    System.out.println("Logout: 5");


    Scanner scan = new Scanner(System.in);
    String input = scan.nextLine();
    int input_num =10;
    try{
         input_num = Integer.parseInt(input) ;
        //  System.out.println("INPUT PARSED TO INTEGER"+ input_num);
    }catch (NumberFormatException e){
           System.out.println("Invalid option. choose again.");
            continue;
    }

    switch (input_num ) {
        case 1:
        int num_books;
        do{
            System.out.println("How many books you want to add: ");
             while (!scan.hasNextInt()) {
                        System.out.println("Please enter a valid number:");
                        scan.next(); // discard invalid input
                    }
            num_books = scan.nextInt();
            scan.nextLine();

        }while(num_books<=0);
            List<Book> bookstoadd = new ArrayList<>();
            int i = 1;
            while(num_books >0){
                System.out.println("Enter details for book: "+i);
                System.out.println("Title: ");
                String title = scan.nextLine();
                System.out.println("Author name: ");
                String author = scan.nextLine();
                System.out.println("Genre: ");
                String genre = scan.nextLine();
                System.out.println("Number of available copies: ");
                while (!scan.hasNextInt()) {
                        System.out.println("Please enter a valid number:");
                        scan.next(); // discard invalid input
                    }
                int copies = scan.nextInt();
                scan.nextLine();
                Book book = new Book(title, author, genre, copies);
                bookstoadd.add(book);
                num_books -=1;
                i++;

            }
            this.add_new_Books(bookstoadd);
            
            continue;

        case 2:
            System.out.println("Enter book id you want to edit: ");
            String book_id = scan.nextLine();
            Book book = Main.books.get(book_id);
            while (book == null){
                System.out.println("\nInvalid book id. try again later ...");
                 System.out.println("Enter book id you want to edit: ");
                 book_id = scan.nextLine();
                 book = Main.books.get(book_id);
                
            }
            System.out.println("What do you want to edit? Enter either: \"title\" \"author\" \"genre\" \"copies\" ");
            String option = scan.nextLine();
          
            while(!option.equalsIgnoreCase("title") && !option.equalsIgnoreCase("author") && !option.equalsIgnoreCase("genre") &&  !option.equalsIgnoreCase("copies")){
                System.out.println("Invalid entry. Try again.....");
                System.out.println("What do you want to edit? Enter either: \"title\" \"author\" \"genre\" \"copies\" ");
                 option = scan.nextLine();
            }
            option = option.toLowerCase();
            switch(option){
                case "title", "author", "genre":
                    System.out.println("Enter the new data: "); 
                    String data  = scan.nextLine();
                    this.editBook(book, option, data);
                    continue;
                case "copies":
                    System.out.println("Enter the new number of copies: ");
                      while (!scan.hasNextInt()) {
                        System.out.println("Please enter a valid number:");
                        scan.next(); // discard invalid input
                    }
                    int copies = scan.nextInt();
                    this.editBook(book, copies);
                    continue;

            

            }

            case 3: 
                System.out.println("Enter book id you want to delete: ");
                String bk_id = scan.nextLine();
                Book book_delete = Main.books.get(bk_id);
                while (book_delete == null){
                System.out.println("\nInvalid book id. try again...");
                 System.out.println("Enter book id you want to delete: ");
                 bk_id = scan.nextLine();
                 book_delete = Main.books.get(bk_id);
                
                }
                this.deleteBook(book_delete);
                continue;


            case 4:     
            
                int num_users;
                do{
                 System.out.println("How many regular users you want to register: ");
                while (!scan.hasNextInt()) {
                        System.out.println("Please enter a valid number:");
                        scan.next(); // discard invalid input
                    }
                num_users = scan.nextInt();
                scan.nextLine();

                }while(num_users<=0);
                List<User> users_to_add = new ArrayList<>();
                for ( i =1; num_users >0; i++){
                System.out.println("Enter username for new regular user: "+ i);
                String name = scan.nextLine();
                System.out.println("Enter email for new regular user: "+ i);
                String email = scan.nextLine();
                System.out.println("Enter password for new regular user: "+ i);
                String pass = scan.nextLine();
                RegularUser user = new RegularUser(name, email, pass);
                users_to_add.add(user);
                num_users--;

                }
                this.registerUsers(users_to_add);
                continue;
              
                

        case 5:
                System.out.println("Logging out of the system ....");
                return ; 


        default:
                System.out.println("Invalid option. choose again.");
               continue;
    }
}
  
}


}